const std = @import("std");

const log = std.log.scoped(.arch_generator);

pub fn main() !void {
    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);
    defer arena.deinit();
    const alloc = arena.allocator();
    const args = try std.process.argsAlloc(alloc);

    if (args.len != 3) {
        log.err("wrong number of arguments {any}", .{args});
        std.process.exit(1);
    }
    const arch = args[1];
    const output_file_path = args[2];

    var output_file = try std.fs.cwd().createFile(output_file_path, .{});
    defer output_file.close();

    _ = try output_file.write(
        \\ // NOTE: THIS FILE WAS AUTO-GENERATED BY tools/generate_arch.zig
        \\ // Run `zig build gen-arch` to regenerate
        \\
        \\
    );
    const KV = struct { key: []const u8, value: []const u8 };
    var list = std.ArrayList(KV){};
    const arch_dir_path = try std.fmt.allocPrint(alloc, "src/arch/{s}/", .{arch});
    const arch_dir = try std.fs.cwd().openDir(arch_dir_path, .{ .iterate = true });
    var dir_walker = try arch_dir.walk(alloc);
    defer dir_walker.deinit();
    while (try dir_walker.next()) |entry| {
        if (entry.kind != .file) continue;
        var split_iter = std.mem.splitScalar(u8, entry.basename, '.');
        var module_name = try alloc.dupeZ(u8, split_iter.first());
        const module_path = try alloc.dupeZ(u8, entry.path);
        if (std.mem.eql(u8, module_name, "arch")) continue;
        if (std.zig.Token.getKeyword(module_name) != null) {
            module_name[0] = std.ascii.toUpper(module_name[0]);
        }
        try list.append(alloc, .{ .key = module_name, .value = module_path });
    }
    const Comparer = struct {
        fn f(_: @This(), lhs: KV, rhs: KV) bool {
            return std.mem.order(u8, lhs.key, rhs.key).compare(.lt);
        }
    };
    std.sort.pdq(KV, list.items, Comparer{}, Comparer.f);
    for (list.items) |item| {
        _ = try output_file.write(try std.fmt.allocPrint(
            alloc,
            \\ pub const {s} = @import("{s}");
            \\
        ,
            .{ item.key, item.value },
        ));
    }
    return std.process.cleanExit();
}
